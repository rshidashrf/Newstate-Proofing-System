generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  role      Role     @default(CLIENT)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Project {
  id              Int           @id @default(autoincrement())
  projectNumber   String        @unique @map("project_number")
  name            String
  description     String?
  clientEmail     String?       @map("client_email")
  downloadEnabled Boolean       @default(true) @map("download_enabled")
  archived        Boolean       @default(false)
  previewMetadata Json?         @map("preview_metadata")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  activityLogs    ActivityLog[]
  reviews         Review[]

  @@map("projects")
}

model Review {
  id          Int          @id @default(autoincrement())
  projectId   Int          @map("project_id")
  shareLink   String       @unique @map("share_link")
  status      Status       @default(PENDING)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  approvals   Approval[]
  designItems DesignItem[]
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model DesignItem {
  id          Int          @id @default(autoincrement())
  reviewId    Int          @map("review_id")
  fileUrl     String       @map("file_url")
  fileName    String       @map("file_name")
  version     Int          @default(1)
  orderIndex  Int          @default(0) @map("order_index")
  createdAt   DateTime     @default(now()) @map("created_at")
  fileSize    Int?         @map("file_size")
  fileType    String?      @map("file_type")
  annotations Annotation[]
  comments    Comment[]
  review      Review       @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("design_items")
}

model Comment {
  id              Int        @id @default(autoincrement())
  designItemId    Int        @map("design_item_id")
  content         String
  createdAt       DateTime   @default(now()) @map("created_at")
  author          String
  drawingData     String?    @map("drawing_data")
  type            String     @default("comment")
  canvasHeight    Float?     @map("canvas_height")
  canvasWidth     Float?     @map("canvas_width")
  canvasX         Float?     @map("canvas_x")
  canvasY         Float?     @map("canvas_y")
  imageHeight     Float?     @map("image_height")
  imageWidth      Float?     @map("image_width")
  pdfPage         Int?       @map("pdf_page")
  pdf_scroll_info String?
  is_pdf          Boolean?   @default(false)
  pdf_scroll_y    Float?
  authorEmail     String?    @map("author_email")
  isAdmin         Boolean    @default(false) @map("is_admin")
  designItem      DesignItem @relation(fields: [designItemId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Annotation {
  id           Int        @id @default(autoincrement())
  designItemId Int        @map("design_item_id")
  xPosition    Decimal    @map("x_position")
  yPosition    Decimal    @map("y_position")
  content      String
  createdAt    DateTime   @default(now()) @map("created_at")
  designItem   DesignItem @relation(fields: [designItemId], references: [id], onDelete: Cascade)

  @@map("annotations")
}

model Approval {
  id            Int      @id @default(autoincrement())
  reviewId      Int      @map("review_id")
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  signatureData String?  @map("signature_data")
  decision      Decision
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  review        Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("approvals")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  projectId Int      @map("project_id")
  userName  String   @map("user_name")
  action    String
  details   String
  createdAt DateTime @default(now()) @map("created_at")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model Settings {
  id              Int      @id @default(autoincrement())
  siteName        String   @default("Proofing System") @map("site_name")
  siteDescription String?  @map("site_description")
  adminEmail      String?  @map("admin_email")
  logoUrl         String?  @default("/images/nsb-logo.png") @map("logo_url")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model EmailQueue {
  id          Int           @id @default(autoincrement())
  to          String
  subject     String
  htmlContent String        @map("html_content")
  textContent String?       @map("text_content")
  from        String        @default("art@newstatebranding.com")
  status      EmailStatus   @default(PENDING)
  priority    Int           @default(0)
  attempts    Int           @default(0)
  maxAttempts Int           @default(3) @map("max_attempts")
  lastAttempt DateTime?     @map("last_attempt")
  nextAttempt DateTime?     @map("next_attempt")
  errorMessage String?      @map("error_message")
  metadata   Json?        // Store additional data like project info, user info, etc.
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  sentAt     DateTime?     @map("sent_at")

  @@map("email_queue")
}

enum Role {
  ADMIN
  CLIENT
}

enum Status {
  PENDING
  APPROVED
  REVISION_REQUESTED
}

enum Decision {
  APPROVED
  REVISION_REQUESTED
}

enum EmailStatus {
  PENDING
  PROCESSING
  SENT
  FAILED
  CANCELLED
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}
